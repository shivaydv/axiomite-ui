import path from "path";
import { z } from "zod";
import { rimraf } from "rimraf";
import { promises as fs } from "fs";
import { registry } from "../registry/index";
import { registryItemFileSchema } from "../registry/schema";

const REGISTRY_BASE_PATH = "registry";
const PUBLIC_FOLDER_BASE_PATH = "public/r";
const COMPONENT_FOLDER_PATH = "components";

type File = z.infer<typeof registryItemFileSchema>;

async function buildRegistryIndex() {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`;
  for (const item of registry.items) {
    const resolveFiles = item.files?.map((file) => `${file.path}`);
    if (!resolveFiles) {
      continue;
    }

    const componentPath = item.files?.[0]?.path
      ? `@/${REGISTRY_BASE_PATH}/${item.files[0].path}`
      : "";

    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file) => {
      const filePath = `${typeof file === "string" ? file : file.path}`;
      const resolvedFilePath = path.resolve(filePath);
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`;
    })}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    })`
        : "null"
    },
    meta: ${JSON.stringify(item.meta)},
  },`;
  }

  index += `
  }`;

  // Write style index.
  rimraf.sync(path.join(process.cwd(), "registry/__index__.tsx"));
  await fs.writeFile(path.join(process.cwd(), "registry/__index__.tsx"), index);
}

async function writeFileRecursive(filePath: string, data: string) {
  const dir = path.dirname(filePath); // Extract the directory path

  try {
    // Ensure the directory exists, recursively creating directories as needed
    await fs.mkdir(dir, { recursive: true });

    // Write the file
    await fs.writeFile(filePath, data, "utf-8");
    console.log(`File written to ${filePath}`);
  } catch (error) {
    console.error(`Error writing file`);
    console.error(error);
  }
}

const getComponentFiles = async (
  files: z.infer<typeof registryItemFileSchema>[]
) => {
  const filesArrayPromises = (files ?? []).map(async (file) => {
    // file is an object with path, type, and maybe target
    const filePath = `${REGISTRY_BASE_PATH}/${file.path}`;
    const fileContent = await fs.readFile(filePath, "utf-8");
    return {
      type: file.type,
      content: fileContent,
      path: file.path,
      // target: file.target ? `${COMPONENT_FOLDER_PATH}/${file.target}`:file.path,
      target: file.target ?? file.path,
    };
  });
  const filesArray = await Promise.all(filesArrayPromises);

  return filesArray;
};

try {
  console.log("üóÇÔ∏è Building registry/__index__.tsx...");
  await buildRegistryIndex();
  console.log("‚úÖ Registry index built successfully");

  console.log("üíÖ Building json files...");
  for (let i = 0; i < registry?.items?.length; i++) {
    const component = registry.items[i];
    const files = component.files;
    if (!files) throw new Error("No files found for component");

    const filesArray = await getComponentFiles(files);

    const json = JSON.stringify(
      {
        ...component,
        files: filesArray,
      },
      null,
      2
    );
    const jsonPath = `${PUBLIC_FOLDER_BASE_PATH}/${component.name}.json`;
    await await writeFileRecursive(jsonPath, json);
  }
  console.log("‚úÖ JSON files built successfully");
} catch (error) {
  console.error("‚ùå Build failed with error:");
  console.error(error);
  if (error instanceof Error) {
    console.error("Error stack:", error.stack);
  }
  process.exit(1);
}
