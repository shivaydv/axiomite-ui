import { exec } from "child_process"
import { promises as fs } from "fs"
import path from "path"
import { rimraf } from "rimraf"
import { registryItemFileSchema } from "../registry/schema";
import { z } from "zod"

import { registry } from "../registry/index"


const REGISTRY_BASE_PATH = "registry";
const PUBLIC_FOLDER_BASE_PATH = "public/r";

async function buildRegistryIndex() {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`
  for (const item of registry.items) {
    const resolveFiles = item.files?.map(
      (file) => `${REGISTRY_BASE_PATH}/${file.path}`
    )
    if (!resolveFiles) {
      continue
    }

    const componentPath = item.files?.[0]?.path
      ? `@/${REGISTRY_BASE_PATH}/${item.files[0].path}`
      : ""

    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file) => {
      const filePath = `${REGISTRY_BASE_PATH}/${typeof file === "string" ? file : file.path}`
      const resolvedFilePath = path.resolve(filePath)
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`
    })}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    })`
        : "null"
    },
    categories: ${JSON.stringify(item.categories)},
    meta: ${JSON.stringify(item.meta)},
  },`
  }

  index += `
  }`

  console.log(`#Ô∏è‚É£  ${Object.keys(registry.items).length} components found`)

  // Write style index.
  rimraf.sync(path.join(process.cwd(), "registry/__index__.tsx"))
  await fs.writeFile(path.join(process.cwd(), "registry/__index__.tsx"), index)
}

async function buildRegistryJsonFile() {
  // 1. Fix the path for registry items.
  const fixedRegistry = {
    ...registry,
    items: registry.items.map((item) => {
      const files = item.files?.map((file) => {
        return {
          ...file,
          path: `registry/${file.path}`,
        }
      })

      return {
        ...item,
        files,
      }
    }),
  }

  // 2. Write the content of the registry to `registry.json`
  rimraf.sync(path.join(process.cwd(), `registry.json`))
  await fs.writeFile(
    path.join(process.cwd(), `registry.json`),
    JSON.stringify(fixedRegistry, null, 2)
  )
}

// ---------------------- 


async function writeFileRecursive(filePath: string, data: string) {
  const dir = path.dirname(filePath); // Extract the directory path

  try {
    // Ensure the directory exists, recursively creating directories as needed
    await fs.mkdir(dir, { recursive: true });

    // Write the file
    await fs.writeFile(filePath, data, "utf-8");
    console.log(`File written to ${filePath}`);
  } catch (error) {
    console.error(`Error writing file`);
    console.error(error);
  }
}

const getComponentFiles = async (
  files: z.infer<typeof registryItemFileSchema>[]
) => {
  const filesArrayPromises = (files ?? []).map(async (file) => {
    // file is an object with path, type, and maybe target
    const filePath = `${REGISTRY_BASE_PATH}/${file.path}`;
    const fileContent = await fs.readFile(filePath, "utf-8");
    return {
      type: file.type,
      content: fileContent,
      path: file.path,
      // target: file.target ? `${COMPONENT_FOLDER_PATH}/${file.target}`:file.path,
      target: file.target ?? file.path,
    };
  });
  const filesArray = await Promise.all(filesArrayPromises);

  return filesArray;
};

async function buildRegistryJsonFilesCustom(){

  for (let i = 0; i < registry?.items?.length; i++) {
    const component = registry.items[i];
    const files = component.files;
    if (!files) throw new Error("No files found for component");

    const filesArray = await getComponentFiles(files);

    const json = JSON.stringify(
      {
        ...component,
        files: filesArray,
      },
      null,
      2
    );
    const jsonPath = `${PUBLIC_FOLDER_BASE_PATH}/${component.name}.json`;
    await await writeFileRecursive(jsonPath, json);
  }
}

async function buildRegistry() {
  return new Promise((resolve, reject) => {
    const process = exec(
      `pnpm dlx shadcn@latest build`
    )

    process.on("exit", (code) => {
      if (code === 0) {
        resolve(undefined)
      } else {
        reject(new Error(`Process exited with code ${code}`))
      }
    })
  })
}

async function syncRegistry() {
  // Store the current registry content
  const registryDir = path.join(process.cwd(), "registry")
  const registryIndexPath = path.join(registryDir, "__index__.tsx")
  let registryContent: string | null = null

  try {
    registryContent = await fs.readFile(registryIndexPath, "utf8")
  } catch {
    // File might not exist yet, that's ok
  }

  // 1. Call pnpm registry:build for www.
  await exec("pnpm --filter=www registry:build")

  // 2. Copy the www/public/r directory to v4/public/r.
  rimraf.sync(path.join(process.cwd(), "public/r"))
  await fs.cp(
    path.resolve(process.cwd(), "../www/public/r"),
    path.resolve(process.cwd(), "public/r"),
    { recursive: true }
  )

  // 3. Restore the registry content if we had it
  if (registryContent) {
    await fs.writeFile(registryIndexPath, registryContent, "utf8")
  }
}

// async function buildBlocksIndex() {
//   const blocks = await getAllBlocks(["registry:block"])

//   const payload = blocks.map((block) => ({
//     name: block.name,
//     description: block.description,
//     categories: block.categories,
//   }))

//   rimraf.sync(path.join(process.cwd(), "registry/__blocks__.json"))
//   await fs.writeFile(
//     path.join(process.cwd(), "registry/__blocks__.json"),
//     JSON.stringify(payload, null, 2)
//   )
// }

try {
  console.log("üóÇÔ∏è Building registry/__index__.tsx...")
  await buildRegistryIndex()

  console.log("üóÇÔ∏è Building registry.json...")
  await buildRegistryJsonFilesCustom()

  // console.log("üóÇÔ∏è Building registry/__blocks__.json...")
  // await buildBlocksIndex()

  // console.log("üíÖ Building registry.json...")
  // await buildRegistryJsonFile()

  // console.log("üèóÔ∏è Building registry...")
  // await buildRegistry()

  // console.log("üîÑ Syncing registry...")
  // await syncRegistry()
} catch (error) {
  console.error(error)
  process.exit(1)
}